// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    owner,
    title,
    periodic_reminder_time_seconds
) VALUES (
    $1, $2, $3
) RETURNING id, title, status, created_at, file_count, owner, periodic_reminder_time_seconds
`

type CreateTodoParams struct {
	Owner                       string `json:"owner"`
	Title                       string `json:"title"`
	PeriodicReminderTimeSeconds *int32 `json:"periodicReminderTimeSeconds"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Owner, arg.Title, arg.PeriodicReminderTimeSeconds)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.FileCount,
		&i.Owner,
		&i.PeriodicReminderTimeSeconds,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, status, created_at, file_count, owner, periodic_reminder_time_seconds FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.FileCount,
		&i.Owner,
		&i.PeriodicReminderTimeSeconds,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, status, created_at, file_count, owner, periodic_reminder_time_seconds FROM todos
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTodosParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.FileCount,
			&i.Owner,
			&i.PeriodicReminderTimeSeconds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET title = COALESCE($2, title),
    status = COALESCE($3, status),
    periodic_reminder_time_seconds = COALESCE($4, periodic_reminder_time_seconds)
WHERE id = $1
RETURNING id, title, status, created_at, file_count, owner, periodic_reminder_time_seconds
`

type UpdateTodoParams struct {
	ID                          int64   `json:"todoId"`
	Title                       *string `json:"title"`
	Status                      *string `json:"status"`
	PeriodicReminderTimeSeconds *int32  `json:"periodicReminderTimeSeconds"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.PeriodicReminderTimeSeconds,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.FileCount,
		&i.Owner,
		&i.PeriodicReminderTimeSeconds,
	)
	return i, err
}

const updateTodoFileCount = `-- name: UpdateTodoFileCount :one
UPDATE todos
SET file_count = file_count + $2
WHERE id = $1
RETURNING id, title, status, created_at, file_count, owner, periodic_reminder_time_seconds
`

type UpdateTodoFileCountParams struct {
	ID        int64 `json:"todoId"`
	FileCount int32 `json:"fileCount"`
}

func (q *Queries) UpdateTodoFileCount(ctx context.Context, arg UpdateTodoFileCountParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodoFileCount, arg.ID, arg.FileCount)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.FileCount,
		&i.Owner,
		&i.PeriodicReminderTimeSeconds,
	)
	return i, err
}
