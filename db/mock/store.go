// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jaingounchained/todo/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/jaingounchained/todo/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAttachment mocks base method.
func (m *MockStore) CreateAttachment(arg0 context.Context, arg1 db.CreateAttachmentParams) (db.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", arg0, arg1)
	ret0, _ := ret[0].(db.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockStoreMockRecorder) CreateAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockStore)(nil).CreateAttachment), arg0, arg1)
}

// CreateTodo mocks base method.
func (m *MockStore) CreateTodo(arg0 context.Context, arg1 string) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockStoreMockRecorder) CreateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockStore)(nil).CreateTodo), arg0, arg1)
}

// DeleteAttachment mocks base method.
func (m *MockStore) DeleteAttachment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockStoreMockRecorder) DeleteAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockStore)(nil).DeleteAttachment), arg0, arg1)
}

// DeleteAttachmentTx mocks base method.
func (m *MockStore) DeleteAttachmentTx(arg0 context.Context, arg1 db.DeleteAttachmentTxParams) (db.DeleteAttachmentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentTx", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteAttachmentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentTx indicates an expected call of DeleteAttachmentTx.
func (mr *MockStoreMockRecorder) DeleteAttachmentTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentTx", reflect.TypeOf((*MockStore)(nil).DeleteAttachmentTx), arg0, arg1)
}

// DeleteAttachmentsOfTodo mocks base method.
func (m *MockStore) DeleteAttachmentsOfTodo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentsOfTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachmentsOfTodo indicates an expected call of DeleteAttachmentsOfTodo.
func (mr *MockStoreMockRecorder) DeleteAttachmentsOfTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentsOfTodo", reflect.TypeOf((*MockStore)(nil).DeleteAttachmentsOfTodo), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockStore) DeleteTodo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockStoreMockRecorder) DeleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockStore)(nil).DeleteTodo), arg0, arg1)
}

// GetAttachment mocks base method.
func (m *MockStore) GetAttachment(arg0 context.Context, arg1 int64) (db.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachment", arg0, arg1)
	ret0, _ := ret[0].(db.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachment indicates an expected call of GetAttachment.
func (mr *MockStoreMockRecorder) GetAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachment", reflect.TypeOf((*MockStore)(nil).GetAttachment), arg0, arg1)
}

// GetTodo mocks base method.
func (m *MockStore) GetTodo(arg0 context.Context, arg1 int64) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockStoreMockRecorder) GetTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockStore)(nil).GetTodo), arg0, arg1)
}

// ListAttachmentOfTodo mocks base method.
func (m *MockStore) ListAttachmentOfTodo(arg0 context.Context, arg1 int64) ([]db.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachmentOfTodo", arg0, arg1)
	ret0, _ := ret[0].([]db.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachmentOfTodo indicates an expected call of ListAttachmentOfTodo.
func (mr *MockStoreMockRecorder) ListAttachmentOfTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachmentOfTodo", reflect.TypeOf((*MockStore)(nil).ListAttachmentOfTodo), arg0, arg1)
}

// ListTodos mocks base method.
func (m *MockStore) ListTodos(arg0 context.Context, arg1 db.ListTodosParams) ([]db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos", arg0, arg1)
	ret0, _ := ret[0].([]db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockStoreMockRecorder) ListTodos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockStore)(nil).ListTodos), arg0, arg1)
}

// UpdateTodoFileCount mocks base method.
func (m *MockStore) UpdateTodoFileCount(arg0 context.Context, arg1 db.UpdateTodoFileCountParams) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoFileCount", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoFileCount indicates an expected call of UpdateTodoFileCount.
func (mr *MockStoreMockRecorder) UpdateTodoFileCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoFileCount", reflect.TypeOf((*MockStore)(nil).UpdateTodoFileCount), arg0, arg1)
}

// UpdateTodoStatus mocks base method.
func (m *MockStore) UpdateTodoStatus(arg0 context.Context, arg1 db.UpdateTodoStatusParams) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoStatus indicates an expected call of UpdateTodoStatus.
func (mr *MockStoreMockRecorder) UpdateTodoStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoStatus", reflect.TypeOf((*MockStore)(nil).UpdateTodoStatus), arg0, arg1)
}

// UpdateTodoTitle mocks base method.
func (m *MockStore) UpdateTodoTitle(arg0 context.Context, arg1 db.UpdateTodoTitleParams) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoTitle", arg0, arg1)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoTitle indicates an expected call of UpdateTodoTitle.
func (mr *MockStoreMockRecorder) UpdateTodoTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoTitle", reflect.TypeOf((*MockStore)(nil).UpdateTodoTitle), arg0, arg1)
}

// UploadAttachmentTx mocks base method.
func (m *MockStore) UploadAttachmentTx(arg0 context.Context, arg1 db.UploadAttachmentTxParams) (db.UploadAttachmentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttachmentTx", arg0, arg1)
	ret0, _ := ret[0].(db.UploadAttachmentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAttachmentTx indicates an expected call of UploadAttachmentTx.
func (mr *MockStoreMockRecorder) UploadAttachmentTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttachmentTx", reflect.TypeOf((*MockStore)(nil).UploadAttachmentTx), arg0, arg1)
}
