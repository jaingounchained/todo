basePath: /
definitions:
  api.createTodoRequest:
    properties:
      title:
        maxLength: 255
        type: string
    required:
    - title
    type: object
  api.createUserRequest:
    properties:
      email:
        example: jain@jaingounchained.com
        type: string
      fullName:
        example: Jain Bhavya
        type: string
      password:
        example: weak_password
        minLength: 6
        type: string
      username:
        example: jaingounchained
        type: string
    required:
    - email
    - fullName
    - password
    - username
    type: object
  api.getTodoAttachmentMetadataResponse:
    properties:
      attachmentId:
        type: integer
      filename:
        type: string
      todoId:
        type: integer
    type: object
  api.loginUserRequest:
    properties:
      password:
        example: weak_password
        minLength: 6
        type: string
      username:
        example: jaingounchained
        type: string
    required:
    - password
    - username
    type: object
  api.loginUserResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiredAt:
        type: string
      refreshToken:
        type: string
      refreshTokenExpiredAt:
        type: string
      sessionId:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.renewAccessTokenRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  api.renewAccessTokenResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiredAt:
        type: string
    type: object
  api.updateTodoRequestBody:
    properties:
      status:
        type: string
      title:
        maxLength: 255
        type: string
    type: object
  api.userResponse:
    properties:
      email:
        example: jain@jaingounchained.com
        type: string
      fullName:
        example: Jain Bhavya
        type: string
      username:
        example: jaingounchained
        type: string
    type: object
  db.Todo:
    properties:
      createdAt:
        type: string
      fileCount:
        type: integer
      owner:
        type: string
      status:
        type: string
      title:
        type: string
      todoId:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    name: Bhavya Jain
  description: A todo management service API in go which supports attachments
  title: Todo API
  version: "1.0"
paths:
  /health:
    get:
      description: Returns server health
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      tags:
      - health
  /todos:
    get:
      description: List todos based on page ID and page size
      parameters:
      - description: page ID
        in: query
        minimum: 1
        name: pageId
        required: true
        type: integer
      - description: page size
        in: query
        maximum: 10
        minimum: 5
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/db.Todo'
              type: array
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Creates a todo with the specified title
      parameters:
      - description: Todo title
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/api.createTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Todo'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Creates a Todo
      tags:
      - todos
  /todos/{todoId}:
    delete:
      consumes:
      - application/json
      description: Delete todo by TodoID
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Deletes a Todo
      tags:
      - todos
    get:
      description: Get todo by TodoID
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Todo'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Returns a Todo
      tags:
      - todos
    patch:
      consumes:
      - application/json
      description: Updates the todo title/status
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      - description: Todo title/status
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/api.updateTodoRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Todo'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Updated the todo title/status
      tags:
      - todos
  /todos/{todoId}/attachments:
    get:
      consumes:
      - application/json
      description: Get attachment metadata for the corresponding todo
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.getTodoAttachmentMetadataResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Get attachments metadata
      tags:
      - attachments
    post:
      consumes:
      - multipart/form-data
      description: Upload attachments for the corresponding todo
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      - collectionFormat: csv
        description: attachments
        in: formData
        items:
          type: file
        name: attachments
        required: true
        type: array
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "413":
          description: Request Entity Too Large
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Upload attachments
      tags:
      - attachments
  /todos/{todoId}/attachments/{attachmentId}:
    delete:
      consumes:
      - application/json
      description: Delete attachment for the corresponding todo
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      - description: attachment ID
        in: path
        minimum: 1
        name: attachmentId
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Delete attachment
      tags:
      - attachments
    get:
      consumes:
      - application/json
      description: Get attachment for the corresponding todo
      parameters:
      - description: Todo ID
        in: path
        minimum: 1
        name: todoId
        required: true
        type: integer
      - description: attachment ID
        in: path
        minimum: 1
        name: attachmentId
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - AccessTokenAuth: []
      summary: Get attachments
      tags:
      - attachments
  /tokens/renewAccess:
    post:
      consumes:
      - application/json
      description: Renew the access token through the refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/api.renewAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.renewAccessTokenResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Renew access token
      tags:
      - users
  /users:
    post:
      consumes:
      - application/json
      description: Creates a User
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Creates a User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Returns an access token for accessing user resources
      parameters:
      - description: User login credentials
        in: body
        name: loginCredentials
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User login
      tags:
      - users
securityDefinitions:
  AccessTokenAuth:
    description: To access todos and attachments
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
